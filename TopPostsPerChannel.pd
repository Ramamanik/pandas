why lambda?
--------------
1) it can be helpful for short-term, one-off functions.

2) it apply functions to sequences or pandas DataFrame columns.

3) it Keep the code simple and readable when the function logic is simple and short-lived.


Problem_solution 
--------------------
Identify the top 3 posts with the highest like counts for each channel. Assign a rank to each post based on its like count, allowing for gaps in ranking when posts have the same number of likes. For example, if two posts tie for 1st place, the next post should be ranked 3rd, not 2nd. Exclude any posts with zero likes.The output should display the channel name, post ID, post creation date, and the like count for each post.

breakdown
-------------

merges two DataFrames (posts and channels) on the channel_id column using an inner join.

groups the merged result by channel_name 

selects the top 3 posts based on the 'likes' column using nlargest(). 

Finally, it filters out rows with zero 'likes' to focus on posts with engagement.

import pandas as pd

posts.head()

result = pd.merge( posts,channels, how='inner', on='channel_id')

top3_by_value = result.groupby('channel_name', group_keys=False).apply(lambda x: x.nlargest(3, 'likes'))

selected_columns = top3_by_value[['channel_name','post_id','created_at','likes' ]]

df_filtered = selected_columns[selected_columns['likes'] != 0]
